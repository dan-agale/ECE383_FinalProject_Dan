/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "xparameters.h"
#include <unistd.h>
#include "xstatus.h"

#include "platform.h"

#include "xil_printf.h"				// Contains xil_printf

#include <xuartlite_l.h>				// Contains XUartLite_RecvByte

#include <xil_io.h>					// Contains Xil_Out8 and its variation

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

/*
 * The following constants define the slave registers used for our Counter PCORE
 */
#define countBase		0x44a00000
#define RegExData		countBase			// 16	LSBs of slv_reg0
#define	RegExRow		countBase+4			// 4	LSBs of slv_reg1
#define	RegExCol		countBase+8			// 5	LSBs of slv_reg2
#define	RegExWen		countBase+0x0c		// 1	LSB  of slv_reg3
#define RegRandom		countBase+0x10		// 2	LSBs of slv_reg4
#define RegWinFlag		countBase+0x14		// 16 	LSBs of slv_reg5 are R_bus
#define RegButtonPress	countBase+0x18		// 16 	LSBs of slv_reg5 are R_bus
#define RegIRFlag		countBase+0x1C


#define printf xil_printf			/* A smaller footprint printf */
int gameStart = 0;
int playerBust = 0;
int dealerBust = 0;


#define uartRegAddr		0x40600000		// read <= RX, write => TX

// Define enums for card values and suits
typedef enum {
    ACE 	= 0b00000101,
    TWO 	= 0b00000110,
    THREE 	= 0b00000111,
    FOUR 	= 0b00001000,
    FIVE 	= 0b00001001,
    SIX 	= 0b00001010,
    SEVEN 	= 0b00001011,
    EIGHT 	= 0b00001100,
    NINE 	= 0b00001101,
    TEN 	= 0b00001110,
    JACK 	= 0b00001111,
    QUEEN 	= 0b00010000,
    KING 	= 0b00010001
} Rank;

typedef enum {
    ONE 			= 0b00010011,
    BACK 			= 0b00010010,
	GREENBOX		= 0b00011010,
	TOPBORDER		= 0b00010111,
	BOTTOMBORDER	= 0b00011000,
	LOSEBOX			= 0b00011011,
	WINBOX			= 0b00011001,
	PLAYERBOX		= 0b00010101,
	DEALERBOX		= 0b00010100
} objects;

//typedef enum {
//	HEART	= 0x00000001,
//	DIAMOND = 0x00000010,
//	CLUB 	= 0x00000011,
//	SPADE 	= 0x00000100
//} Suit;

typedef enum {
	HEART	= 0b00000001,
	DIAMOND = 0b00000010,
	CLUB 	= 0b00000011,
	SPADE 	= 0b00000100
} Suit;

/** Card (struct cardType) is used in CardList
 */
typedef struct cardType
{
    Suit suit;
    Rank rank;
    struct cardType *nextCard;
} Card;

/* a struct used to create a cardList (a list of Card structs)
 * FIELD: count - the number of cards in the list
 * FIELD: topCard - a pointer to the top card in the list
 * FIELD: bottomCard - a pointer to the bottom card in the list
 * FIELD: ListName - a string holding the player name or CardList name
 * FIELD: highhand - high hand value of CarsList
 * FIELD: lowhand - low hand value of CarsList
 * FIELD: highbust - high hand bust status
 * FIELD: lowbust - low hand bust status
 * FIELD: highwin - high hand win status
 * FIELD: lowwin - low hand win status
 */
typedef struct
{
    int count;
    Card *topCard;
    Card *bottomCard;
    char ListName[15];
    int total;
    int bust;
} CardList;

void printBlack(int col, int row)
{
	Xil_Out8(RegExData, 0b0010010);
	Xil_Out8(RegExCol, col);
	Xil_Out8(RegExRow, row);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);
}

void printStartUp(){
	printBlack(0,1);
	printBlack(0,2);
	printBlack(0,3);
	printBlack(0,4);
	printBlack(0,5);

	printBlack(1,1);
	printBlack(1,3);
	printBlack(1,5);
	printBlack(1,8);
	printBlack(1,12);

	printBlack(2,1);
	printBlack(2,2);
	printBlack(2,3);
	printBlack(2,4);
	printBlack(2,5);
	printBlack(2,8);
	printBlack(2,9);
	printBlack(2,10);
	printBlack(2,11);
	printBlack(2,12);

	printBlack(3,8);

	printBlack(4,1);
	printBlack(4,2);
	printBlack(4,3);
	printBlack(4,4);
	printBlack(4,5);

	printBlack(5,5);
	printBlack(5,9);
	printBlack(5,10);
	printBlack(5,11);
	printBlack(5,12);

	printBlack(6,5);
	printBlack(6,8);
	printBlack(6,10);

	printBlack(7,9);
	printBlack(7,10);
	printBlack(7,11);
	printBlack(7,12);

	printBlack(8,2);
	printBlack(8,3);
	printBlack(8,4);
	printBlack(8,5);

	printBlack(9,1);
	printBlack(9,3);
	printBlack(9,8);
	printBlack(9,9);
	printBlack(9,10);
	printBlack(9,11);
	printBlack(9,12);

	printBlack(10,2);
	printBlack(10,3);
	printBlack(10,4);
	printBlack(10,5);
	printBlack(10,8);
	printBlack(10,12);

	printBlack(11,8);
	printBlack(11,12);

	printBlack(12,1);
	printBlack(12,2);
	printBlack(12,3);
	printBlack(12,4);
	printBlack(12,5);

	printBlack(13,1);
	printBlack(13,5);
	printBlack(13,8);
	printBlack(13,9);
	printBlack(13,10);
	printBlack(13,11);
	printBlack(13,12);

	printBlack(14,1);
	printBlack(14,5);
	printBlack(14,10);

	printBlack(15,8);
	printBlack(15,9);
	printBlack(15,11);
	printBlack(15,12);

	printBlack(16,1);
	printBlack(16,2);
	printBlack(16,3);
	printBlack(16,4);
	printBlack(16,5);

	printBlack(17,3);
	printBlack(17,8);
	printBlack(17,9);
	printBlack(17,10);
	printBlack(17,12);

	printBlack(18,1);
	printBlack(18,2);
	printBlack(18,4);
	printBlack(18,5);

	printBlack(19,8);
	printBlack(19,9);
	printBlack(19,10);
	printBlack(19,12);



	gameStart = 0;
}


void printPlayerTotal(CardList *cardList)
{
	int total = cardList->total; // create new card struct to topCard

	int tensPlaceInt = total / 10;
	int onesPlaceInt = total % 10;
	Rank tensPlace;
	Rank onesPlace;

	switch(tensPlaceInt) {

		case 1:
			tensPlace = ONE;
			break;
		case 2:
			tensPlace = TWO;
			break;
		case 3:
			tensPlace = THREE;
			break;
		case 4:
			tensPlace = FOUR;
			break;
		case 5:
			tensPlace = FIVE;
			break;
		case 6:
			tensPlace = SIX;
			break;
		case 7:
			tensPlace = SEVEN;
			break;
		case 8:
			tensPlace = EIGHT;
			break;
		case 9:
			tensPlace = NINE;
			break;
		default:
			tensPlace = 0b00000000;
			break;
	}

	switch(onesPlaceInt) {

		case 1:
			onesPlace = ONE;
			break;
		case 2:
			onesPlace = TWO;
			break;
		case 3:
			onesPlace = THREE;
			break;
		case 4:
			onesPlace = FOUR;
			break;
		case 5:
			onesPlace = FIVE;
			break;
		case 6:
			onesPlace = SIX;
			break;
		case 7:
			onesPlace = SEVEN;
			break;
		case 8:
			onesPlace = EIGHT;
			break;
		case 9:
			onesPlace = NINE;
			break;
		default:
			onesPlace = 0b00000000;
			break;
	}

	Xil_Out8(RegExData, tensPlace);
	Xil_Out8(RegExCol, 2);
	Xil_Out8(RegExRow, 8);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);

	//print card
	Xil_Out8(RegExData, onesPlace);
	Xil_Out8(RegExCol, 3);
	Xil_Out8(RegExRow, 8);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);


}

void printDealerTotal(CardList *cardList)
{
	int total = cardList->total; // create new card struct to topCard

	int tensPlaceInt = total / 10;
	int onesPlaceInt = total % 10;
	Rank tensPlace;
	Rank onesPlace;

	switch(tensPlaceInt) {

		case 1:
			tensPlace = ONE;
			break;
		case 2:
			tensPlace = TWO;
			break;
		case 3:
			tensPlace = THREE;
			break;
		case 4:
			tensPlace = FOUR;
			break;
		case 5:
			tensPlace = FIVE;
			break;
		case 6:
			tensPlace = SIX;
			break;
		case 7:
			tensPlace = SEVEN;
			break;
		case 8:
			tensPlace = EIGHT;
			break;
		case 9:
			tensPlace = NINE;
			break;
		default:
			tensPlace = 0b00000000;
			break;
	}

	switch(onesPlaceInt) {

		case 1:
			onesPlace = ONE;
			break;
		case 2:
			onesPlace = TWO;
			break;
		case 3:
			onesPlace = THREE;
			break;
		case 4:
			onesPlace = FOUR;
			break;
		case 5:
			onesPlace = FIVE;
			break;
		case 6:
			onesPlace = SIX;
			break;
		case 7:
			onesPlace = SEVEN;
			break;
		case 8:
			onesPlace = EIGHT;
			break;
		case 9:
			onesPlace = NINE;
			break;
		default:
			onesPlace = 0b00000000;
			break;
	}

	Xil_Out8(RegExData, tensPlace);
	Xil_Out8(RegExCol, 2);
	Xil_Out8(RegExRow, 3);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);

	//print card
	Xil_Out8(RegExData, onesPlace);
	Xil_Out8(RegExCol, 3);
	Xil_Out8(RegExRow, 3);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);


}

void printDealerCardList(CardList *cardList)
{
   Card *currentCard = cardList->topCard; // create new card struct to topCard
   int Col = 1;
   int Row = 5;
   while (currentCard != NULL)            // Loop through the CardList until the end is reached
   {

		Rank rank = currentCard->rank;
		Suit suit = currentCard->suit;

		printObject(BACK, Col, Row);
		Xil_Out8(RegExData, suit);
		Xil_Out8(RegExCol, Col);
		Xil_Out8(RegExRow, Row);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);

		//print card
		printObject(BACK, Col, Row+1);
		Xil_Out8(RegExData, rank);
		Xil_Out8(RegExCol, Col);
		Xil_Out8(RegExRow, Row+1);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);

		Col = Col +2;

      currentCard = currentCard->nextCard; // Move to the next card in the CardList
   }
}

void printPlayerCardList(CardList *cardList)
{
   Card *currentCard = cardList->topCard; // create new card struct to topCard
   int Col = 1;
   int Row = 10;
   while (currentCard != NULL)            // Loop through the CardList until the end is reached
   {

		Rank rank = currentCard->rank;
		Suit suit = currentCard->suit;

		printObject(BACK, Col, Row);
		Xil_Out8(RegExData, suit);
		Xil_Out8(RegExCol, Col);
		Xil_Out8(RegExRow, Row);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);

		//print card
		printObject(BACK, Col, Row+1);
		Xil_Out8(RegExData, rank);
		Xil_Out8(RegExCol, Col);
		Xil_Out8(RegExRow, Row+1);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);

		Col = Col +2;

      currentCard = currentCard->nextCard; // Move to the next card in the CardList
   }
}

//// Function to free the memory allocated for the linked list
//void freeLinkedList(CardNode* head) {
//    CardNode* current = head;
//    while (current != NULL) {
//        CardNode* temp = current;
//        current = current->next;
//        free(temp);
//    }
//}


Card *createCard(Rank cardRank, Suit cardSuit)
{
   Card *newCard = (Card *)malloc(sizeof(Card)); // dynamically allocate memory for a Card struct
   newCard->rank = cardRank;
   newCard->suit = cardSuit;     // initialize rank and suit with inputs
   newCard->nextCard = NULL; // initialize nextCard pointer with NULL pointer
   return newCard;           // return Card struct
}

CardList *createCardList()
{
   CardList *newList = (CardList *)malloc(sizeof(CardList)); // dynamically allocate memory for a CardList struct
   newList->topCard = NULL;
   newList->bottomCard = NULL; // initialize topCard and bottomCard pointers with NULL pointer
   newList->count = 0;
   newList->total = 0;
   newList->bust = 0;
   return newList;      // return CardList struct
}

int isEmpty(CardList *cardList)
{
   return cardList->count == 0; // returns 1 if the list is empty, else 0
}

void appendCard(CardList *cardList, Card *card)
{
   card->nextCard = NULL;
   if (cardList->topCard == NULL)
   { // set both topCard and bottomCard to the new card
      cardList->topCard = card;
      cardList->bottomCard = card;
      cardList->count = 1;
   }
   else
   {
      cardList->bottomCard->nextCard = card;
      cardList->bottomCard = card;
      cardList->count += 1; // append the card to the end of the list
      if (cardList->topCard == NULL)
      {
         cardList->topCard = card;
      } // if the topCard NULL, update topCard to the new card
   }
}

void makeDeck(CardList *deck)
{
   Card *newCard = NULL;
   Suit cardSuits[4] = {HEART, DIAMOND, SPADE, CLUB};
   Rank cardRanks[13] = {ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING};


   // Loop through each suit and rank
   for (int suit = 0; suit < 4; suit++)
   {
      for (int rank = 0; rank < 13; rank++)
      {
         newCard = createCard(cardRanks[rank], cardSuits[suit]); // Create a card with the current rank and suit
         appendCard(deck, newCard);              // Append the card to the deck
      }
   }
}

Card *getTopCard(CardList *cardList)
{
   if (cardList->topCard == NULL)
   {
      return NULL; // if the list is empty, return NULL
   }
   Card *topCard = cardList->topCard;     // if the list is not empty, get the top card
   cardList->topCard = topCard->nextCard; // move the topCard to the next card
   cardList->count -= 1;                  // decrease count of cards in list
   return topCard;                        // return topCard
}

void shuffleCardList(CardList *cardList, int cutCount)
{
   CardList *list1 = createCardList();
   CardList *list2 = createCardList(); // create temporary lists to cut and fold

   // Loop thorugh 50 rounds of cutting and folding
   for (int i = 0; i < 50; i++)
   {

      // cut
      cutCount = cutCount % 10 + 21;
      for (int i = 0; i < cutCount; i++)
      {
         appendCard(list1, getTopCard(cardList));
      }
      while (!isEmpty(cardList))
      {
         appendCard(list2, getTopCard(cardList));
      }

      // fold
      while (!isEmpty(list1) || !isEmpty(list2))
      {
         if (rand() % 2)
         {
            if (!isEmpty(list1))
            {
               appendCard(cardList, getTopCard(list1));
            }
         }
         else
         {
            if (!isEmpty(list2))
            {
               appendCard(cardList, getTopCard(list2));
            }
         }
      }
   }
   freeCardList(list1);
   freeCardList(list2); // free the temporary lists
}



void freeCardList(CardList *cardList)
{
   Card *nextCard = cardList->topCard;

   // loop though untill nextCard is pointed at NULL
   while (nextCard != NULL)
   {
      cardList->topCard = nextCard->nextCard; // move topCard pointer to nextCard
      free(nextCard);                         // free memory of of current card
      nextCard = cardList->topCard;           // move nextCard pointer to topCard
   }
   free(cardList); // free memory
}


void Count(CardList *player)
{
   Card *currentCard = player->topCard;

   int total = 0;
   int numAces = 0; // Initialize variables to track high and low hand value, and Aces
   player->total = 0;

   // loop though CardList while currentCard not pointed to NULL
   while (currentCard != NULL)
   {
      if (currentCard->rank == TEN || currentCard->rank == JACK || currentCard->rank == QUEEN || currentCard->rank == KING)
      {
    	  total += 10;
      }
      else if (currentCard->rank == ACE)
      {
    	  total += 1;
    	  numAces++;
      }
      else if (currentCard->rank == TWO)
      {
    	  total += 2;
      }
      else if (currentCard->rank == THREE)
      {
    	  total += 3;
      }
      else if (currentCard->rank == FOUR)
      {
    	  total += 4;
      }
      else if (currentCard->rank == FIVE)
      {
    	  total += 5;
      }
      else if (currentCard->rank == SIX)
      {
    	  total += 6;
      }
      else if (currentCard->rank == SEVEN)
      {
    	  total += 7;
      }
      else if (currentCard->rank == EIGHT)
      {
    	  total += 8;
      }
      else
      {
    	  total += 9;
      }


      currentCard = currentCard->nextCard;
   } // calculate both high and low hand values with the lowest possible value

   for (int i = 0; i < numAces; i++)
   {
      if (total + 10 <= 21)
      {
    	  total += 10;
      }
   } // adjust high hand value according to Aces present


   player->total = total;

   if (player->total > 21) // check for high bust
   {
	   player->bust = 1;
   }
   printf("%d\r\n",player->total);
}

void printObject(objects type, int col, int row){
	Xil_Out8(RegExData, type);
	Xil_Out8(RegExCol, col);
	Xil_Out8(RegExRow, row);
	Xil_Out8(RegExWen, 0x1);
	Xil_Out8(RegExWen, 0x0);
}

int hitOrStand(CardList *deck, CardList *player){
		Xil_Out8(RegIRFlag, 0x0);
		sleep(50000);
		Xil_Out8(RegIRFlag, 0x1);

		while (Xil_In8(RegButtonPress) != 111 && Xil_In8(RegButtonPress) != 71) { // if source
			printf("Hit or Stand??\r\n");
			printf("%d\r\n",Xil_In8(RegButtonPress));
		}

		if (Xil_In8(RegButtonPress) == 111) { // HIT
			CardList *playerTemp;
			playerTemp = getTopCard(deck);
			appendCard(player, playerTemp);
			Count(player);
			printPlayerTotal(player);
			printPlayerCardList(player);

			Xil_Out8(RegIRFlag, 0x0);
			usleep(50000);
			Xil_Out8(RegIRFlag, 0x1);

			while (Xil_In8(RegButtonPress) != 213) { // if source
				printf("RESET CONTROLLER\r\n");
				printf("%d\r\n",Xil_In8(RegButtonPress));
			}


			return 1;
		}
		else {
			printf("return 0\r\n",Xil_In8(RegButtonPress));
			return 0;
		}

}

int main()
{
    	init_platform();

//		    	Xil_Out8(RegIRFlag, 0x1);
//		    	;
//		    	printf("%d\r\n",Xil_In8(RegButtonPress));
//
//		    	if (Xil_In8(RegButtonPress) == 77){
//		    		printf("SUCCESS\r\n"); // POWER BUTTON
//		    	}
//		    	if (Xil_In8(RegButtonPress) == 111){
//		    		printf("SUCCESS\r\n"); // 1 button
//		    	}
//		    	if (Xil_In8(RegButtonPress) == 71){
//		    		printf("SUCCESS\r\n"); // 2 button
//		    	}
//		    	if (Xil_In8(RegButtonPress) == 213){
//		    		printf("SUCCESS\r\n"); // SOURCE button
//		    	}

		for (int row = 0; row < 15; row++) {
	    	for (int col = 0; col < 21; col++) {
	    		Xil_Out8(RegExData, GREENBOX);
	    		Xil_Out8(RegExCol, col);
	    		Xil_Out8(RegExRow, row);
	    		Xil_Out8(RegExWen, 0x1);
	    		Xil_Out8(RegExWen, 0x0);
	    	}
	    }
		printStartUp();

	Xil_Out8(RegIRFlag, 0x0);
	usleep(50000);
	Xil_Out8(RegIRFlag, 0x1);

	while (Xil_In8(RegButtonPress) != 77) {
		printf("expecting an input\r\n");
		printf("%d\r\n",Xil_In8(RegButtonPress));
//		Xil_Out8(RegIRFlag, 0x1);
	}

	for (int row = 0; row < 15; row++) {
    	for (int col = 0; col < 21; col++) {
    		Xil_Out8(RegExData, GREENBOX);
    		Xil_Out8(RegExCol, col);
    		Xil_Out8(RegExRow, row);
    		Xil_Out8(RegExWen, 0x1);
    		Xil_Out8(RegExWen, 0x0);
    	}
    }

		printObject(DEALERBOX, 1,3);
		printObject(TOPBORDER, 1,5);
		printObject(BOTTOMBORDER, 1,6);
		printObject(TOPBORDER, 3,5);
		printObject(BOTTOMBORDER, 3,6);
		printObject(TOPBORDER, 5,5);
		printObject(BOTTOMBORDER, 5,6);
		printObject(TOPBORDER, 7,5);
		printObject(BOTTOMBORDER,7,6);
		printObject(TOPBORDER, 9,5);
		printObject(BOTTOMBORDER, 9,6);
		printObject(TOPBORDER, 11,5);
		printObject(BOTTOMBORDER, 11,6);
		printObject(TOPBORDER, 13,5);
		printObject(BOTTOMBORDER, 13,6);
		printObject(TOPBORDER, 15,5);
		printObject(BOTTOMBORDER, 15,6);
		printObject(TOPBORDER, 17,5);
		printObject(BOTTOMBORDER, 17,6);

		printObject(PLAYERBOX, 1,8);
		printObject(TOPBORDER, 1,10);
		printObject(BOTTOMBORDER, 1,11);
		printObject(TOPBORDER, 3,10);
		printObject(BOTTOMBORDER, 3,11);
		printObject(TOPBORDER, 5,10);
		printObject(BOTTOMBORDER, 5,11);
		printObject(TOPBORDER, 7,10);
		printObject(BOTTOMBORDER,7,11);
		printObject(TOPBORDER, 9,10);
		printObject(BOTTOMBORDER, 9,11);
		printObject(TOPBORDER, 11,10);
		printObject(BOTTOMBORDER, 11,11);
		printObject(TOPBORDER, 13,10);
		printObject(BOTTOMBORDER, 13,11);
		printObject(TOPBORDER, 15,10);
		printObject(BOTTOMBORDER, 15,11);
		printObject(TOPBORDER, 17,10);
		printObject(BOTTOMBORDER, 17,11);

		printObject(BACK,1,5);
		printObject(BACK,1,6);
		printObject(BACK,3,5);
		printObject(BACK,3,6);

		printObject(BACK,1,10);
		printObject(BACK,1,11);
		printObject(BACK,3,10);
		printObject(BACK,3,11);

		CardList* player = createCardList();
		CardList* dealer = createCardList();

		CardList *deck = createCardList();
		makeDeck(deck);
		int random = Xil_In32(RegRandom);

		shuffleCardList(deck, random);
		Card *temp1 = getTopCard(deck);
		appendCard(dealer, temp1);
		Count(dealer);
		printPlayerTotal(player);
		printDealerTotal(dealer);
		printDealerCardList(dealer);

		Card *temp2 = getTopCard(deck);
		appendCard(dealer, temp2);
		Count(dealer);
		Xil_Out8(RegExData, 0b0010010);
		Xil_Out8(RegExCol, 3);
		Xil_Out8(RegExRow, 5);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);
		Xil_Out8(RegExData, 0b0010010);
		Xil_Out8(RegExCol, 3);
		Xil_Out8(RegExRow, 6);
		Xil_Out8(RegExWen, 0x1);
		Xil_Out8(RegExWen, 0x0);


		for (int i = 0; i < 2; i++)
		 {
			Card *playerTemp = getTopCard(deck);
			appendCard(player, playerTemp);
			Count(player);
			printPlayerTotal(player);
			printPlayerCardList(player);
		 }

	int hORs = 1;

	while(hORs == 1 && player->bust == 0){


		hORs = hitOrStand(deck, player);

	}

	printf("stand works till here\r\n");
	printDealerTotal(dealer);
	printDealerCardList(dealer);


	while (dealer->total < 18) {
		usleep(50000);
		CardList *dealerTemp;
		dealerTemp = getTopCard(deck);
		appendCard(dealer, dealerTemp);
		Count(dealer);
		printDealerTotal(dealer);
		printDealerCardList(dealer);
		printf("here\r\n");
	}


    while(1) {

    	printDealerCardList(dealer);

    	if (dealer->total == 21) {
    		break;
    	}
    	else if (dealer->total >= 18) {
    		break;
    	}
    	else {
			Card *dealerTemp;
			dealerTemp = getTopCard(deck);
			appendCard(dealer, dealerTemp);
			Count(dealer);
			printPlayerTotal(player);
			printDealerTotal(dealer);
			printDealerCardList(dealer);
        }
    }

    Xil_Out8(RegWinFlag, 0x0);
    if (((player->total > dealer->total) && (player->total < 22)) || dealer->total > 21) {

		for (int row = 0; row < 15; row++) {
	    	for (int col = 0; col < 21; col++) {
	    		Xil_Out8(RegExData, WINBOX);
	    		Xil_Out8(RegExCol, col);
	    		Xil_Out8(RegExRow, row);
	    		Xil_Out8(RegExWen, 0x1);
	    		Xil_Out8(RegExWen, 0x0);
	    	}

	    }
    	Xil_Out8(RegWinFlag, 0x1);
    	sleep(5);
    	Xil_Out8(RegWinFlag, 0x0);
    }
    else {
		for (int row = 0; row < 15; row++) {
	    	for (int col = 0; col < 21; col++) {
	    		Xil_Out8(RegExData, LOSEBOX);
	    		Xil_Out8(RegExCol, col);
	    		Xil_Out8(RegExRow, row);
	    		Xil_Out8(RegExWen, 0x1);
	    		Xil_Out8(RegExWen, 0x0);
	    	}
    }
    }


        cleanup_platform();
        return 0;
}
